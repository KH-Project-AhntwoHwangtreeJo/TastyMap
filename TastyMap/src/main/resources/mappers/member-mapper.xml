<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">

	<resultMap id="memberMap" type="Member">
		<id property="memberId" column="MEMBER_ID"/>
	</resultMap>
	
	<!-- 팔로우, 포스트 카운트용  -->
	<resultMap id="followerPostCnt" type="hashmap"> 
		<result property="followerCnt" column="FOLLOWER_CNT"/>
		<result property="followingCnt" column="FOLLOWING_CNT"/>
		<result property="myPostCnt" column="MY_POST_CNT"/> <!-- property를 vo에 변수 선언하지 않고 MemberController에 바로 보내준다. -->
	</resultMap>
	<!-- 마이 갤러리 사진 조회용 -->
   <resultMap id="postPicure" type="map">
      <result property="pRenamedName" column="PRENAMEDNAME"/>
   </resultMap>
	
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER VALUES (#{memberId}, #{password} , #{userName}, #{nickname}, #{mcontent}, #{birth}, 
		#{gender}, #{phone}, #{email}, #{address}, DEFAULT , #{mphoto})
	</insert>
	
	<select id="checkIdDuplicate" parameterType="HashMap" resultMap="memberMap" statementType="CALLABLE">
		{ CALL ID_DUP_CHK(
                       #{memberId, mode=IN, jdbcType=VARCHAR}, 
                     #{result, mode=OUT, jdbcType=NUMERIC, javaType=integer} ) 
       }
	</select>
	
	<select id="loginMember" parameterType="string" resultMap="memberMap">
		SELECT * FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
		AND MSTATUS='Y'
	</select>
	
	<!-- ●마이 갤러리페이지 조회용  -->
	<select id="myGallery" parameterType="string" resultMap="memberMap">
		SELECT MEMBER_ID,NICKNAME, MCONTENT, MPHOTO
		FROM MEMBER 
		WHERE MEMBER_ID = #{memberId} AND MSTATUS = 'Y'
	</select>
	
	<!-- ●마이 갤러리페이지 사진 조회용  -->
	<select id="myGalleryPhoto" parameterType="string" resultMap="postPicure">
		SELECT PRENAMEDNAME, PNO 
		FROM PICTURE  
		JOIN POST USING(PNO)
		WHERE MEMBER_ID = #{memberId} AND PSTATUS = 'Y' AND PLEVEL =0
		ORDER BY PDATE DESC
	</select>
	
	<update id="memberMapper.updateMember1" parameterType="Member">
		UPDATE MEMBER
            <set>
			PASSWORD = #{password},
			NICKNAME = #{nickname},
			MCONTENT = #{mcontent},
			PHONE = #{phone},
			EMAIL = #{email},
			ADDRESS = #{address},
			<if test="mphoto !='null' ">
			MPHOTO = #{mphoto}
			</if>
			</set>
		WHERE MEMBER_ID = #{memberId}
	</update>
	
	<update id="memberMapper.updateMember2" parameterType="Member">
		UPDATE MEMBER
            <set>
			NICKNAME = #{nickname},
			MCONTENT = #{mcontent},
			PHONE = #{phone},
			EMAIL = #{email},
			ADDRESS = #{address},
			<if test="mphoto !='null' ">
			MPHOTO = #{mphoto}
			</if>
			</set>
		WHERE MEMBER_ID = #{memberId}
	</update>
	
 	<!-- ●팔로잉 팔로워 게시글 개수 출력 -->
	<select id="followAndPostCnt" parameterType="string" resultMap="followerPostCnt">
	       SELECT (SELECT COUNT(*) FROM FOLLOWER WHERE MEMBER_ID = #{memberId}) FOLLOWER_CNT,  <!-- 팔로워 :나를 팔로우 클릭한 사람(member_id가 내 아이디일때) -->
	             (SELECT COUNT(*) FROM FOLLOWER WHERE FOLLOWER_ID = #{memberId}) FOLLOWING_CNT, <!-- 팔로잉 :내가 팔로우 클릭한 사람(follower_id가 내 아이디일때) -->
	             (SELECT COUNT(*) FROM POST WHERE MEMBER_ID = #{memberId} AND PSTATUS = 'Y') MY_POST_CNT 
	      FROM DUAL
	</select>
	
	<select id="findId" parameterType="Member" resultType="String">
		SELECT MEMBER_ID FROM MEMBER
		WHERE USERNAME=#{userName} AND BIRTH=#{birth} AND MSTATUS='Y'
	</select>
	
	<update id="deleteMember" parameterType="String">
		UPDATE MEMBER
			<set>
			MSTATUS = 'N'
			</set>
			WHERE MEMBER_ID = #{memberId}
	</update>
	
	<!-- 마이페이지 지도 마커 표시(조현민) -->
	<select id="myPage" parameterType="String" resultType="PostList">
		SELECT M.MEMBER_ID, NICKNAME, P.PNO, R.RNO, R.RNAME, R.ADDRESS
		FROM MEMBER M
		JOIN POST P ON(P.MEMBER_ID= M.MEMBER_ID)
		JOIN RESTAURANT R ON(R.RNO= P.RNO)
		WHERE PSTATUS = 'Y' AND RSTATUS = 'Y' AND M.MEMBER_ID = #{member_Id} 	
	</select>
	
	
	<!-- 알림 리스트 출력 (조현민) -->
	<select id="selectApprovalReceive" resultType="Alarm">
		SELECT A.* FROM (SELECT * FROM (SELECT *
		FROM   (SELECT M.MPHOTO ,
		             M.NICKNAME "WHOS",
		             1 "TYPE",
		             L.PNO,             
		             (SELECT NICKNAME FROM MEMBER WHERE L.MEMBER_ID = MEMBER_ID) "WHO",
		             PI.PRENAMEDNAME,
		             L.LDATE
		            FROM LOVE L
		JOIN POST P ON(L.PNO = P.PNO)
		JOIN PICTURE PI ON(P.PNO = PI.PNO)
		JOIN MEMBER M ON(M.MEMBER_ID = P.MEMBER_ID)
		WHERE PLEVEL = '0' AND L.MEMBER_ID = #{member_Id}
		ORDER BY L.LDATE DESC)
		UNION
		SELECT * 
		FROM (SELECT M.MPHOTO, M.NICKNAME "WHOS", 2 "TYPE", PC.PNO, PC.NICKNAME "WHO", PI.PRENAMEDNAME, PC.CDATE
		FROM POST PO
		JOIN (SELECT (SELECT NICKNAME
		                        FROM MEMBER
		                        WHERE MEMBER_ID = #{member_Id})NICKNAME, PC.PNO, COMMENT_SEQ, CDATE
		         FROM POST_COMMENT PC
		         JOIN POST P ON(P.PNO = PC.PNO)
		         JOIN MEMBER M ON(P.MEMBER_ID = M.MEMBER_ID)
		         WHERE CWRITER = #{member_Id} AND CSTATUS = 'Y'
		         ORDER BY CDATE DESC) PC ON(PC.PNO = PO.PNO)
		JOIN MEMBER M ON(M.MEMBER_ID = PO.MEMBER_ID)
		JOIN PICTURE PI ON(PO.PNO = PI.PNO)
		WHERE PLEVEL = '0'
		ORDER BY PC.CDATE DESC))
		ORDER BY LDATE DESC) A
		WHERE <![CDATA[ROWNUM<5]]>
	</select>

</mapper>








