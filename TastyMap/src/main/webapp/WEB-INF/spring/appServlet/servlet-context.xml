<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/scss/**" location="/resources/scss/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/fonts/**" location="/resources/fonts/" />
	<resources mapping="/images/**" location="/resources/images/" />
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
			<!-- jsonView 객체와 json 전용 viewResolver 등록하기 -->
		<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1"/>
		</beans:bean>
		
		<!-- fome.xml json lib 사용 -->
		<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
		   
		   
		   <!-- @ResponseBody 아용을 위한 객체 등록 -->
		   <beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
		<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
		<beans:list>
		<beans:ref bean="jacksonMessageConverter"/>
		</beans:list>
		</beans:property>
		</beans:bean>
		   
		   <!-- DispatherServlet 컨트롤러로 가지 전에 동작할 객체인
		      인터셉터 구현하기-->
		   
		   <interceptors>
		      <interceptor>
		          <!-- 인터셉터가 동작할 주소 -->
		          <!-- 특정 URL 경로를 로그인 여부로 차단하기 -->
		          <!-- member 관련 모든 서블릿 차단 -->
		          <mapping path="/member/**/**.do" />
		          <mapping path="/admin/**/*.do"/>
		          <mapping path="/restaurant/**/*.do" />
		          <mapping path="/post/**/*.do"/> 
		          <mapping path="/bookmark/iHaveBookmarkList.do" />
		          <mapping path="/love/iHaveLoveList.do" />
		          <mapping path="/member/myPage.do" />
		          <!-- 로그인 기능 -->
		          <exclude-mapping path="/member/memberLogin.do" />
		          <!-- 회원가입시, 주소입력 -->
		          <exclude-mapping path="/member/jusoPopup.do" />
		          <!-- 회원가입시, 이메일 인증 -->
		          <exclude-mapping path="/member/emailAuth.do" />
		          <!-- 로그인전 아이디 찾기 이동 -->
		          <exclude-mapping path="/member/goFindId.do" />
		          <!-- 회원가입시, 이메일 인증 페이지 이동-->
		          <exclude-mapping path="/member/auth.do" />
		          <!-- 회원가입시, 이메일 인증번호 -->
		          <exclude-mapping path="/member/join_injeung.do{dice}" />
		          <!-- 회원가입페이지 이동 -->
		          <exclude-mapping path="/member/goInsertMember.do" />
		          <!-- 회워가입 -->
		          <exclude-mapping path="/member/insertMember.do" />
		          <!-- 아이디 중복처리 -->
		          <exclude-mapping path="/member/checkIdDuplicate.do" />
		          <!-- 로그인전  아이디 찾기-->
		          <exclude-mapping path="/member/findId.do" />
		          <exclude-mapping path="/restaurant/restaurantAllList.do" />
		          <exclude-mapping path="/restaurant/restaurantDatail.do"/>
		          <exclude-mapping path="/restaurant/top8.do" />
		          <exclude-mapping path="/restaurant/influencer.do" />
		          <exclude-mapping path="/restaurant/searchBar.do" />
		          <exclude-mapping path="post/postAllList.do"/>
		          
		          
		          
		          <!-- /member 로 시작하는 모든 URL경로 차단하기 -->
		          <!-- <mapping path="/member/**/*.do" /> --> 
		          <!-- 모든 경로 차단 중 특정 경로를 제외할 수도 있다. -->
		          <!-- <exclude-mapping path="/member/memberEnroll.do" /> -->
		         <beans:bean id="loginCheckInterceptor"
		                     class="com.kh.tastyMap.common.interceptor.LoginCheckInterceptor" />
		      </interceptor>
		      <interceptor>
		          <!-- admin 인터셉터 -->
		             <mapping path="/admin/**/*.do"/>
		         <beans:bean id="AdminCheckInterceptor"
		                     class="com.kh.tastyMap.common.interceptor.AdminCheckInterceptor" />
		      </interceptor>
		   </interceptors>
		   
		   
		   <!--  파일 업로드 시에 사용할 MultipartResolver 등록하기  -->
		<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10485760"/>
		<!--  10MB  -->
		</beans:bean>
	
		<!-- websocket handler -->
	<!-- 	웹소켓 연결 시 수행할 설정등을 담당한다.(onOpen/onClose 등등)
		<beans id="echoHandler" class="com.kh.websocket.common.EchoHandler"/>
	 
		<websocket:handlers>
			웹 소켓에 연결하기 위한 url 써서 주소 매핑(등록)을 한다.
			<websocket:mapping handler="echoHandler" path="/echo" />
			
			 웹 소켓의 session과 HttpSesstion을 연결하는 인터셉터 등록(스프링이 제공한다.)
			<websocket:handshake-interceptors>
		         <beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		      </websocket:handshake-interceptors>
	 
			sockJS : 웹소켓이 불가능한 환경에서도 웹소켓을 등록할 수 있게 하는 라이브러리 
			스프링으로 stockJS를 사용하겠다라는 설정이다.
		      <websocket:sockjs/>
		 </websocket:handlers> -->
	
	
	<context:component-scan base-package="com.kh.tastyMap" />
	
	<!-- aop 어노테이션 등록 -->
   <aop:aspectj-autoproxy/>
	
	
</beans:beans>
